
services:
  postgres:
    image: lmmdock/postgres-multi
    container_name: postgres
    environment:
      POSTGRES_USERS: "users:users|transactions:transactions"
      POSTGRES_DATABASES: "users-db:users|transactions-db:transactions"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wallet-transactions

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - wallet-transactions

  kafka1:
    image: wurstmeister/kafka:latest
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "user-created:1:2"
      KAFKA_MIN_INSYNC_REPLICAS: 1
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - wallet-transactions

  kafka2:
    image: wurstmeister/kafka:latest
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "user-created:1:2"
      KAFKA_MIN_INSYNC_REPLICAS: 1
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - wallet-transactions

  transactions-service:
    build: ./transactions-service
    container_name: transactions-service-app
    restart: always
    depends_on:
      - kafka1
      - kafka2
      - postgres
    networks:
      - wallet-transactions

  users-service:
    build: ./users-service
    container_name: users-service-app
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - kafka1
      - kafka2
      - postgres
    networks:
      - wallet-transactions
  nats:
    image: nats
    container_name: nats
    restart: always
    ports:
      - "8222:8222"
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --http_port 8222 "
    networks:
      - wallet-transactions
networks:
  wallet-transactions:
    driver: bridge

volumes:
  postgres_data:
