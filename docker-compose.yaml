services:
  postgres:
    platform: linux/amd64
    image: lmmdock/postgres-multi
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USERS: "users:users|transactions:transactions"
      POSTGRES_DATABASES: "users-db:users|transactions-db:transactions"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U users -d users-db && pg_isready -U transactions -d transactions-db"]
      interval: 2s
      timeout: 5s
      retries: 5
    networks:
      - wallet-transactions
    volumes:
      - postgres_data:/var/lib/postgresql/data

  zookeeper:
    platform: linux/amd64
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - 2181:2181
    networks:
      - wallet-transactions

  kafka:
    platform: linux/amd64
    image: wurstmeister/kafka:latest
    container_name: kafka
    restart: always
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "user-created:1:1"
      KAFKA_MIN_INSYNC_REPLICAS: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server kafka:9092" ]
      interval: 10s
      timeout: 30s
      retries: 5
    networks:
      - wallet-transactions
    volumes:
      - kafka_data:/var/run/docker.sock

  nats:
    platform: linux/amd64
    image: nats
    container_name: nats
    restart: always
    ports:
      - 8222:8222
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --http_port 8222 "
    networks:
      - wallet-transactions

  transactions-service:
    platform: linux/amd64
    build: ./transactions-service
    container_name: transactions-service-app
    restart: always
    ports:
      - 8081:8081
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
    networks:
      - wallet-transactions

  users-service:
    platform: linux/amd64
    build: ./users-service
    container_name: users-service-app
    restart: always
    ports:
      - 8080:8080
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - wallet-transactions

networks:
  wallet-transactions:
    driver: bridge

volumes:
  postgres_data:
  kafka_data: